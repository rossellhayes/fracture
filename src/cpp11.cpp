// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// decimal_to_fraction.cpp
integers_matrix<> decimal_to_fraction(const doubles x, const bool base_10, const long max_denom);
extern "C" SEXP _fracture_decimal_to_fraction(SEXP x, SEXP base_10, SEXP max_denom) {
  BEGIN_CPP11
    return cpp11::as_sexp(decimal_to_fraction(cpp11::as_cpp<cpp11::decay_t<const doubles>>(x), cpp11::as_cpp<cpp11::decay_t<const bool>>(base_10), cpp11::as_cpp<cpp11::decay_t<const long>>(max_denom)));
  END_CPP11
}
// lcm.cpp
int gcd(integers x);
extern "C" SEXP _fracture_gcd(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(gcd(cpp11::as_cpp<cpp11::decay_t<integers>>(x)));
  END_CPP11
}
// lcm.cpp
int lcm(integers x, int max);
extern "C" SEXP _fracture_lcm(SEXP x, SEXP max) {
  BEGIN_CPP11
    return cpp11::as_sexp(lcm(cpp11::as_cpp<cpp11::decay_t<integers>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(max)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_fracture_decimal_to_fraction", (DL_FUNC) &_fracture_decimal_to_fraction, 3},
    {"_fracture_gcd",                 (DL_FUNC) &_fracture_gcd,                 1},
    {"_fracture_lcm",                 (DL_FUNC) &_fracture_lcm,                 2},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_fracture(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
